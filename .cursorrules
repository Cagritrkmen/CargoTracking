# React, Node.js, TailwindCSS, JavaScript ve CSS Geliştirme Rehberi

## 🎯 Temel Prensipler

- **DRY (Don't Repeat Yourself)** prensibini uygula: Kod tekrarından kaçın.
- **Hatalardan Arındırılmış Kod** yaz: Boş fonksiyonlar, `todo` blokları bırakma.
- **Best Practices** takip edilir.
- **Performans** odaklı geliştir: Gereksiz yüklemeleri ve işlevsiz kodları temizle.

---

## ⚡ Performans Optimizasyonu

### Frontend (React + TailwindCSS)
- **Code Splitting** ve **Lazy Loading** ile büyük kütüphaneleri ihtiyaç halinde yükle.
- **React.memo**, **useMemo** ve **useCallback** ile gereksiz render'ları önle.
- **Tailwind JIT (Just-In-Time)** derleme özelliğini kullanarak gereksiz CSS'leri dosyadan çıkar.
- **Cursor özelleştirme:**  
  - `cursor-pointer`, `cursor-wait`, vb.
  - Hover/focus durumlarında `transition-all`, `duration-150` gibi efektler kullan.

### Backend (Node.js)
- **Asenkron işlemleri** `async/await` ve `Promise.all` ile yap.
- **Minimal middleware** kullan.
- **Early return** prensibini uygula: Gereksiz nested yapıları önle.

---

## 🔐 Güvenlik

- **XSS / CSRF koruması:** `helmet` gibi güvenlik paketlerini kullan.
- **API güvenliği:** Input validasyonu + sanitizasyon.
- **Çevresel değişkenler (env):** Gizli verileri burada tut.
- **Local/session storage** kullanırken erişim kontrollerine dikkat et.

---

## 🔧 Kod Yazım Kuralları

- HTML'de yalnızca **Tailwind sınıflarını** kullan. `style` tagi ve klasik CSS'yi minimuma indir.
- **Ternary (üçlü) operatör** yerine `class:` Tailwind yapısını kullan.
- Etkileşimli event fonksiyonlarını `handle` prefix'i ile isimlendir:  
  Örnek: `handleClick`, `handleKeyDown`
- Fonksiyonlar `const` ile tanımlanmalı.
- TypeScript kullanmıyorsan tip tanımı zorunlu değil, ancak okunabilirliği koru.
- Erişilebilirlik için:
  - `tabIndex="0"`
  - `aria-label`

---

## 📁 Kod Organizasyonu

- **Feature-based veya Atomic Design** klasör yapısı benimse:
  ```
  src/
  ├── components/        # Yeniden kullanılabilir UI bileşenleri
  ├── pages/            # Sayfa bileşenleri
  ├── hooks/            # Custom React hooks
  ├── services/         # API ve harici servis entegrasyonları
  ├── utils/            # Yardımcı fonksiyonlar
  ├── types/            # TypeScript tip tanımlamaları
  ├── constants/        # Sabit değerler
  ├── assets/           # Statik dosyalar
  ├── styles/           # Global stiller
  └── tests/            # Test dosyaları
  ```
- **Reusable hooks**, **utils** için ayrı klasör kullan.
- **Constants**, **Types** gibi yapıları merkezi bir yerde tut.

---

## 🎨 Component Yapısı

```typescript
import React from 'react';

interface ComponentProps {
  // Props tanımlamaları
}

export const Component: React.FC<ComponentProps> = ({ props }) => {
  // Component mantığı
  
  return (
    <div className="[tailwind classes]">
      {/* Component içeriği */}
    </div>
  );
};
```

---

## 🚀 State Yönetimi

- **Local State:** `useState`, `useReducer`
- **Global State:** Redux veya Context API
- **Form State:** React Hook Form
- **API State:** React Query

---

## 🧪 Test Yazımı

- **Unit Tests:** Jest + React Testing Library
- **Integration Tests:** React Testing Library
- **E2E Tests:** Cypress veya Playwright
- **Test Coverage:** Minimum %80

---

## 📦 Paket Yönetimi

- **Package Manager:** npm veya yarn
- **Lock File:** package-lock.json veya yarn.lock
- **Dependency Audit:** npm audit
- **Version Pinning:** Semantic versioning

---

## 🔄 Git Workflow

- **Branch Naming:**
  - Feature: `feature/[ticket-number]-[description]`
  - Bugfix: `bugfix/[ticket-number]-[description]`
  - Hotfix: `hotfix/[ticket-number]-[description]`

- **Commit Message Format:**
  ```
  [type]([scope]): [description]
  
  [body]
  
  [footer]
  ```

- **Commit Types:**
  - feat: Yeni özellik
  - fix: Hata düzeltmesi
  - docs: Dokümantasyon
  - style: Kod formatı
  - refactor: Kod düzenlemesi
  - test: Test
  - chore: Genel bakım

---

